
#----------------------------------------------------	ERROR HANDLING   ------------------------------------------------#

>> Checked if the number of parameters entered are not equal to 2 
----------> Which is stored in "$#" in bash.

>> Checked if one of the parameters entered is the path of a C -program-file. 
----------> Using file and grep command. 

                        file $1 | grep -Ei ".*:.*c.*program.*text|.*:.*C.*source.*text"

>> Checked if the other file path entered exists!? 
----------> Using [ -e $testcases ] command which checks if the file exists .

>> Copied the file to this directory ( To solve the problem of .gcda files to be present in the same folder as .c file)

>> After the gcc statement, If compilation error occurred then reported and exited.
----------> Using "$?" Which stored the returned value of previous command. Which is zero in case of no error.




#---------------------------------------------------   TASK 1 ----------------------------------------------------------#

>> Compiled the code with the relevant profiling flags and stored errors in .compilation.log file. ( For Warnings )

					gcc -fprofile-arcs -ftest-coverage myfile.c -o task1 2> .compilation.log

>> In a Loop read line by line from the test case file and passed it as parameters to our c-executable. Executed gcov after each execution to update the myfile.c.gcov.
------------> Taken care of the last line of testcase file with [[ -n $testcase ]]


>> Extracted all the Branch 0 bias from myfile.c.gcov and made the corresponding .csv file. ( branch0_bias.csv)
   
    grep -E -B 1 "^[ ]*branch[ ]*0[ ]*taken[ ]*[0-9]*%" myfile.c.gcov | awk '{if(NR%3 == 1) print $2; if(NR%3 == 2) print $4;}' | awk 'NR%2{printf $0;next;}1'| tr -d "%" | tr ":" ","| awk -v t="$i" '{print t","$1 }'>> branch0_bias.csv


	----> First Extract all branch 0 lines and also 1 line above it ( with -B 1 flag ).
	----> Then extract the corresponding fields with % bias and line number. ( NR stores row number )
	----> Merge every two consecutive rows. (One had line number and one % bias)
	----> Remove "%" and substitute ":" with "," and store it in branch0_bias.cs
	----> Finally append the line number in front


>> Finally Made an Rscript and wrote the code to plot bar and line graph in it

		//For Line graph with test cases on different facets and different colour.
				ggplot(data, aes(x=line,y=bias,color=factor(test))) + geom_line() + geom_point() + facet_wrap(~test)  

		//For bar graph with test cases on different facets and with different colour.
				ggplot(data, aes(x=line,y=bias,fill=factor(test))) + geom_bar(stat='identity') + facet_wrap(~test)


#---------------------------------------------------   TASK 2 ----------------------------------------------------------#

	>> Compiled the code with the relevant profiling flags and stored errors in .compilation.log file. ( For Warnings )

						gcc -pg -o task2 task2.c 2> .compilation.log

	>> In a Loop read testcase line by line from the testcases file and passed it to our c-executable. Summarised the data obtained in gmon.out file in gmon.sum file.
	------------> Used flag to create the first gmon.sum file from gmon.out as gmon.sum can't be created manually.

	>> Extracted all functions with their corresponding time and appended in the csv file

		gprof -b -p task2 gmon.out | tr -s " " | grep -E "^ [0-9]+\.[0-9]+" | awk -v t="$i" '{print t","$3","$7}' >> timePerTestCase.csv

	




















